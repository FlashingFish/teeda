<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document
	PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
	"http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
	<properties>
		<title>Extension - 逆引きリファレンス - 入力フォーム</title>
	</properties>
	<body>
		<section name="入力フォーム">
			<ul>
				<li>
					<a href="#フォーム">フォーム</a>
					<ul>
						<li>
							<a href="#フォームを使うには">フォームを使うには</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#テキストフィールド">テキストフィールド</a>
					<ul>
						<li>
							<a href="#テキストフィールドを使うには">テキストフィールドを使うには</a>
						</li>
						<li>
							<a href="#数値の入力を支援するには">数値の入力を支援するには</a>
						</li>
						<li>
							<a href="#日付の入力を支援するには">日付の入力を支援するには</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#パスワードフィールド">パスワードフィールド</a>
					<ul>
						<li>
							<a href="#パスワードフィールドを使うには">
								パスワードフィールドを使うには
							</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#テキストエリア">テキストエリア</a>
					<ul>
						<li>
							<a href="#テキストエリアを使うには">テキストエリアを使うには</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#ラジオボタン_静的">ラジオボタン (静的)</a>
					<ul>
						<li>
							<a href="#静的なラジオボタンを使うには">静的なラジオボタンを使うには</a>
						</li>
						<li>
							<a href="#静的なラジオボタンをチェックされた状態で表示するには">
								静的なラジオボタンをチェックされた状態で表示するには
							</a>
						</li>
						<li>
							<a href="#静的なラジオボタンの値を動的に変えるには">
								静的なラジオボタンの値を動的に変えるには
							</a>
						</li>
						<li>
							<a href="#静的なラジオボタンの数を動的に変えるには">
								静的なラジオボタンの数を動的に変えるには
							</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#ラジオボタン_動的">ラジオボタン (動的)</a>
					<ul>
						<li>
							<a href="#動的なラジオボタンを使うには">動的なラジオボタンを使うには</a>
						</li>
						<li>
							<a href="#動的なラジオボタンで1行に描画される数を指定するには">
								動的なラジオボタンで1行に描画される数を指定するには
							</a>
						</li>
						<li>
							<a href="#動的なラジオボタンを縦に並べるには">
								動的なラジオボタンを縦に並べるには
							</a>
						</li>
						<li>
							<a href="#動的なラジオボタンでテーブルを使わずに描画するには">
								動的なラジオボタンでテーブルを使わずに描画するには
							</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#チェックボックス_単一項目">チェックボックス (単一項目)</a>
					<ul>
						<li>
							<a href="#単一項目のチェックボックスを使うには">
								単一項目のチェックボックスを使うには
							</a>
						</li>
						<li>
							<a href="#単一項目のチェックボックスをチェックされた状態で表示するには">
								単一項目のチェックボックスをチェックされた状態で表示するには
							</a>
						</li>
						<li>
							<a href="#単一項目のチェックボックスを複数使うには">
								単一項目のチェックボックスを複数使うには
							</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#チェックボックス_複数項目">チェックボックス (複数項目)</a>
					<ul>
						<li>
							<a href="#複数項目のチェックボックスを使うには">
								複数項目のチェックボックスを使うには
							</a>
						</li>
						<li>
							<a href="#複数項目のチェックボックスで1行に描画される数を指定するには">
								複数項目のチェックボックスで1行に描画される数を指定するには
							</a>
						</li>
						<li>
							<a href="#複数項目のチェックボックスを縦に並べるには">
								複数項目のチェックボックスを縦に並べるには
							</a>
						</li>
						<li>
							<a href="#複数項目のチェックボックスでテーブルを使わずに描画するには">
								複数項目のチェックボックスでテーブルを使わずに描画するには
							</a>
						</li>
					</ul>
				</li>
			</ul>
		</section>

		<section name="フォーム">
			<subsection name="フォームを使うには">
				<p>
					<code>&lt;form&gt;</code>
					要素に
					<code>id</code>
					属性を付け， 値を
					<code>form</code>
					または
					<code>Form</code>
					で終わるようにします．
				</p>
				<p>
					<code>action</code>
					属性および
					<code>method</code>
					属性，
					<code>name</code>
					属性はレンダリング時に付加されます (テンプレートに記述されていても無視されます)．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<form id="form">
  ...
</form>
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>レンダリング結果は次のようになります．</p>
				<source><![CDATA[
<form id="form" name="form" method="post" action="/context/view/subapp/foo.html">
  ...
</form>
]]></source>
			</subsection>
		</section>

		<section name="テキストフィールド">
			<subsection name="テキストフィールドを使うには">
				<div class="sidebar">
					<code>type</code>
					属性は省略することもできます．
				</div>
				<p>
					<code>type</code>
					属性が
					<code>text</code>
					の
					<code>&lt;input&gt;</code>
					要素を記述して
					<code>id</code>
					属性を付け， その値と同じ名前のプロパティをページクラスに用意します．
				</p>
				<div class="sidebar">
					<code>id</code>
					と
					<code>value</code>
					を除いた属性にはダイナミックプロパティを適用することができます． 詳細は「
					<a href="ext_rev_output.html#属性値を動的に出力するには">
						属性値を動的に出力するには
					</a>
					」を参照してください．
				</div>
				<p>
					レンダリング時，
					<code>&lt;input&gt;</code>
					要素の
					<code>value</code>
					属性にプロパティの値が設定されます． プロパティの値が
					<code>'&lt;'</code>
					や
					<code>'&gt;'</code>
					等を含む場合はエスケープされます．
				</p>
				<p>
					<a href="ext_concept_page.html#ポストバック">ポストバック</a>
					時，ブラウザで入力された値がプロパティに設定されます． ただし， 「
					<a href="ext_rev_validation.html">バリデーション</a>
					」でエラーが発生した場合は設定されません．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<input type="text" id="name" />
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String name;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>name</code>
					プロパティの値が
					<code>"Teeda"</code>
					の場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<input type="text" id="name" name="form:name" value="Teeda" />
]]></source>
				<p>
					テキストフィールドに
					<code>"Seasar"</code>
					と入力してサブミットすると， ページクラスの
					<code>name</code>
					プロパティには
					<code>"Seasar"</code>
					が設定されます．
				</p>
			</subsection>

			<subsection name="数値の入力を支援するには">
				<p>
					<code>&lt;input&gt;</code>
					要素の
					<code>class</code>
					属性に
					<code>"T_currency"</code>
					を含めます．
				</p>
				<p>
					テキストフィールドに入力できるのは数字と符号 (
					<code>'-'</code>
					)，小数点 (
					<code>'.'</code>
					)，カンマ (
					<code>','</code>
					) に限定されます． 数字の後に
					<code>'t'</code>
					，
					<code>'m'</code>
					，
					<code>'b'</code>
					キーを押すと，入力済みの数がそれぞれ 1,000 倍，1,000,000 倍，
					1,000,000,000 倍されます．
				</p>
				<p>不正なキーが押されるとテキストフィールドはクリアされます．</p>
				<p>フォーカスが外れると入力した数はカンマ区切りになります．</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<input type="text" id="saraly" class="T_currency" />
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public BigDecimal saraly;
]]></source>
				<h5>例：レンダリング結果</h5>
				<source><![CDATA[
<input type="text" id="salary" name="form:salary" class="T_currency" 
    onfocus="..." onblur="..." onkeydown="..." style="ime-mode:disabled;" />
]]></source>
			</subsection>

			<subsection name="日付の入力を支援するには">
				<p>
					<code>&lt;input&gt;</code>
					要素の
					<code>class</code>
					属性に
					<code>"T_date"</code>
					を含めます．
				</p>
				<p>
					テキストフィールドに入力できるのは数字とスラッシュ (
					<code>'/'</code>
					) に限定されます．
				</p>
				<p>
					年は二桁で入力することができます． フォーカスが外れると年は4桁に変換され，
					スラッシュ区切りになります．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<input type="text" id="date" class="T_date" />
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
@DateTimeConverter(pattern = "yyyy/MM")
public Date date;
]]></source>
				<h5>例：レンダリング結果</h5>
				<source><![CDATA[
<input type="text" id="date" name="form:date" class="T_currency" 
    onfocus="..." onblur="..." onkeydown="..." style="ime-mode:disabled;" />
]]></source>
			</subsection>
		</section>

		<section name="パスワードフィールド">
			<subsection name="パスワードフィールドを使うには">
				<p>
					<code>type</code>
					属性が
					<code>password</code>
					の
					<code>&lt;input&gt;</code>
					要素を記述して
					<code>id</code>
					属性を付け， その値と同じ名前のプロパティをページクラスに用意します．
				</p>
				<div class="sidebar">
					<code>id</code>
					と
					<code>value</code>
					を除いた属性にはダイナミックプロパティを適用することができます． 詳細は「
					<a href="ext_rev_output.html#属性値を動的に出力するには">
						属性値を動的に出力するには
					</a>
					」を参照してください．
				</div>
				<p>
					レンダリング時，
					<code>&lt;input&gt;</code>
					要素の
					<code>value</code>
					属性にプロパティの値が設定されます． プロパティの値が
					<code>'&lt;'</code>
					や
					<code>'&gt;'</code>
					等を含む場合はエスケープされます．
				</p>
				<p>
					<a href="ext_concept_page.html#ポストバック">ポストバック</a>
					時，ブラウザで入力された値がプロパティに設定されます． ただし， 「
					<a href="ext_rev_validation.html">バリデーション</a>
					」でエラーが発生した場合は設定されません．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<input type="password" id="pwd" />
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String pwd;
]]></source>
				<h5>例：レンダリング結果</h5>
				<source><![CDATA[
<input type="password" id="pwd" name="form:pwd" />
]]></source>
				<p>
					パスワードフィールドに
					<code>"1234"</code>
					と入力してサブミットすると， ページクラスの
					<code>pwd</code>
					プロパティには
					<code>"1234"</code>
					が設定されます．
				</p>
			</subsection>
		</section>

		<section name="テキストエリア">
			<subsection name="テキストエリアを使うには">
				<div class="sidebar">
					<code>id</code>
					を除いた属性にはダイナミックプロパティを適用することができます． 詳細は「
					<a href="ext_rev_output.html#属性値を動的に出力するには">
						属性値を動的に出力するには
					</a>
					」を参照してください．
				</div>
				<p>
					<code>&lt;textarea&gt;</code>
					要素を記述して
					<code>id</code>
					属性を付け， その値と同じ名前のプロパティをページクラスに用意します．
				</p>
				<p>
					レンダリング時，
					<code>&lt;textarea&gt;</code>
					要素の内容にはプロパティの値が設定されます． プロパティの値が
					<code>'&lt;'</code>
					や
					<code>'&gt;'</code>
					等を含む場合はエスケープされます．
				</p>
				<p>
					<a href="ext_concept_page.html#ポストバック">ポストバック</a>
					時，ブラウザで入力された値がプロパティに設定されます． ただし， 「
					<a href="ext_rev_validation.html">バリデーション</a>
					」でエラーが発生した場合は設定されません．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<textarea id="name">dummy</textarea>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String name;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>name</code>
					プロパティの値が
					<code>"Teeda"</code>
					の場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<textarea id="name" name="form:name">Teeda</textarea>
]]></source>
				<p>
					テキストエリアに
					<code>"Seasar"</code>
					と入力してサブミットすると， ページクラスの
					<code>name</code>
					プロパティには
					<code>"Seasar"</code>
					が設定されます．
				</p>
			</subsection>
		</section>

		<section name="ラジオボタン (静的)">
			<div class="sidebar">
				ここで使われるコンポーネントは「inputRadio」と呼ばれます．
			</div>
			<p>
				静的なラジオボタンは，テンプレートHTMLに記述された
				<code>&lt;input&gt;</code>
				をそのままレンダリングでも使用するタイプのラジオボタンです．
			</p>

			<subsection name="静的なラジオボタンを使うには">
				<div class="sidebar">
					<code>id</code>
					，
					<code>name</code>
					，
					<code>value</code>
					を除いた属性にはダイナミックプロパティを適用することができます． 詳細は「
					<a href="ext_rev_output.html#属性値を動的に出力するには">
						属性値を動的に出力するには
					</a>
					」を参照してください．
				</div>
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素に
					<code>id</code>
					属性を付け， その値と同じ名前のプロパティをページクラスに用意します．
					このプロパティは選択された項目の値を保持します．
				</p>
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の内容に
					<code>type</code>
					属性が
					<code>radio</code>
					の
					<code>&lt;input&gt;</code>
					要素を記述して，その
					<code>name</code>
					属性に
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>id</code>
					属性と同じ値を指定します． 同じ
					<code>name</code>
					属性を持つ
					<code>&lt;input type="radio"&gt;</code>
					要素を複数記述することができます．
				</p>
				<p>
					<a href="ext_concept_page.html#ポストバック">ポストバック</a>
					時，ブラウザで選択されたラジオボタンの
					<code>value</code>
					属性の値がプロパティに設定されます． ただし， 「
					<a href="ext_rev_validation.html">バリデーション</a>
					」でエラーが発生した場合はプロパティは設定されません．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<div id="selected">
    <label><input type="radio" name="selected" value="A" />A</label>
    <label><input type="radio" name="selected" value="B" />B</label>
    <label><input type="radio" name="selected" value="C" />C</label>
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String selected;
]]></source>
				<h5>例：レンダリング結果</h5>
				<source><![CDATA[
<div id="selected">
    <label><input type="radio" name="form:selected" value="A" />A</label>
    <label><input type="radio" name="form:selected" value="B" />B</label>
    <label><input type="radio" name="form:selected" value="C" />C</label>
</div>
]]></source>
				<p>
					2番目のラジオボタン(B)を選択してサブミットすると， ページクラスの
					<code>selected</code>
					プロパティには
					<code>"B"</code>
					が設定されます．
				</p>
			</subsection>

			<subsection name="静的なラジオボタンをチェックされた状態で表示するには">
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>id</code>
					属性と同じ名前のプロパティに，チェックされた状態で表示したい
					<code>&lt;input&gt;</code>
					要素の
					<code>value</code>
					属性と同じ値を設定します．
				</p>
				<p>
					レンダリング時，
					<code>input</code>
					要素の
					<code>value</code>
					属性の値が，
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>id</code>
					属性と同じ名前のプロパティの値と一致する
					<code>&lt;input&gt;</code>
					要素には，
					<code>checked</code>
					属性が付け加えられます．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<div id="selected">
    <label><input type="radio" name="selected" value="A" />A</label>
    <label><input type="radio" name="selected" value="B" />B</label>
    <label><input type="radio" name="selected" value="C" />C</label>
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String selected;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>selected</code>
					プロパティの値が
					<code>"A"</code>
					の場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<div id="selected">
    <label><input type="radio" name="form:selected" value="A" checked="checked" />A</label>
    <label><input type="radio" name="form:selected" value="B" />B</label>
    <label><input type="radio" name="form:selected" value="C" />C</label>
</div>
]]></source>
			</subsection>

			<subsection name="静的なラジオボタンの値を動的に変えるには">
				<p>
					「
					<a href="">ダイナミックプロパティ</a>
					」と組み合わせます．
				</p>
				<p>
					<code>type</code>
					属性が
					<code>radio</code>
					の
					<code>&lt;input&gt;</code>
					要素に
					<code>id</code>
					属性を付け， その値と同じ名前のプロパティをページクラスに用意します．
					このプロパティは項目の値を保持します．
				</p>
				<p>
					レンダリング時，
					<code>input</code>
					要素の
					<code>value</code>
					属性の値は
					<code>id</code>
					属性の値と同じ名前のプロパティに置き換えられます．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<div id="selected">
    <label>
        <input type="radio" id="code1" name="selected" value="dummy" />
        <span id="name1" te:omittag="true">dummy</span>
    </label>
    <label>
        <input type="radio" id="code2" name="selected" value="dummy" />
        <span id="name2" te:omittag="true">dummy</span>
    </label>
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String selected;
public String code1;
public String name1;
public String code2;
public String name2;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>code1</code>
					が
					<code>"t"</code>
					，
					<code>name1</code>
					が
					<code>"Teeda"</code>
					で，
					<code>code2</code>
					が
					<code>"s"</code>
					，
					<code>name2</code>
					が
					<code>"SAStruts"</code>
					の場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<div id="selected">
    <label>
        <input type="radio" id="code1" name="form:selected" value="t" />
        Teeda
    </label>
    <label>
        <input type="radio" id="code2" name="form:selected" value="s" />
        SAStruts
    </label>
</div>
]]></source>
				<p>
					1番目のラジオボタン(Teeda)を選択してサブミットすると， ページクラスの
					<code>selected</code>
					プロパティには
					<code>"t"</code>
					が設定されます．
				</p>
			</subsection>

			<subsection name="静的なラジオボタンの数を動的に変えるには">
				<p>
					<a href="ext_rev_foreach.html">forEach</a>
					と組み合わせます．
				</p>
				<div class="sidebar">
					サブミットされた値を受け取るには「
					<a href="">ItemsSave</a>
					」も必要です． 詳細は「」を参照してください．
				</div>
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の内容に，forEach にマッピングされる (
					<code>id</code>
					属性が
					<code>Items</code>
					で終わる) 要素を記述します． その
					<code>id</code>
					属性と同じ値を持つプロパティをページクラスに用意します． このプロパティの型は配列または
					<code>java.util.List</code>
					に，その要素の型はDtoまたは
					<code>java.util.Map</code>
					にします． Dtoのプロパティまたは
					<code>Map</code>
					のキーと同じ名前のプロパティをページクラスにも持たせます．
				</p>
				<p>
					<code>type</code>
					属性が
					<code>radio</code>
					の
					<code>&lt;input&gt;</code>
					要素に
					<code>id</code>
					属性を付け， Dtoのプロパティまたは
					<code>Map</code>
					のキーと同じ名前を付けます．
				</p>
				<p>
					レンダリング時，
					<code>input</code>
					要素の
					<code>value</code>
					属性の値は
					<code>id</code>
					属性の値と同じ名前のプロパティに置き換えられます．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<input type="hidden" id="productItemsSave" />
<div id="selected">
    <div id="productItems">
        <label>
            <input type="radio" id="code" name="selected" value="dummy" />
            <span id="name" te:omittag="true">dummy</span>
        </label>
    </div>
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String selected;
public List<ProductDto> productItems;
public String code;
public String name;
]]></source>
				<h5>例：Dtoのプロパティ (ProductDto.java)</h5>
				<source><![CDATA[
public String code;
public String name;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>productItems</code>
					が3つの要素を持つ場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<input type="hidden" id="form:productItemsSave" value="..." />
<div id="selected">
    
        <label>
            <input type="radio" id="code" name="form:selected" value="t" />
            Teeda
        </label>
        <label>
            <input type="radio" id="code" name="form:selected" value="s" />
            SAStruts
        </label>
        <label>
            <input type="radio" id="code" name="form:selected" value="c" />
            Cubby
        </label>
    
</div>
]]></source>
				<p>
					1番目のラジオボタン(Teeda)を選択してサブミットすると， ページクラスの
					<code>selected</code>
					プロパティには
					<code>"t"</code>
					が設定されます．
				</p>
				<h4>関連項目</h4>
				<ul>
					<li>
						<a href="">forEach</a>
					</li>
					<li>
						<a href="">itemsSave</a>
					</li>
				</ul>
			</subsection>
		</section>

		<section name="ラジオボタン (動的)">
			<div class="sidebar">
				ここで使われるコンポーネントは「selectOneRadio」と呼ばれます．
			</div>
			<p>
				動的なラジオボタンは，テンプレートHTMLに記述された
				<code>&lt;input&gt;</code>
				要素をレンダリングで使用しないタイプのラジオボタンです．
				<code>&lt;input&gt;</code>
				要素はTeedaによって動的に生成されます．
			</p>

			<subsection name="動的なラジオボタンを使うには">
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素に
					<code>id</code>
					属性を付けます． 要素の内容には，
					<code>type</code>
					属性が
					<code>radio</code>
					で，
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>id</code>
					属性と同じ
					<code>name</code>
					属性を持つ
					<code>&lt;input&gt;</code>
					要素を記述します． この
					<code>&lt;input&gt;</code>
					要素は実行時には捨てられます (ブラウザで直接プレビューする際のモックとして活用してください)．
				</p>
				<p>
					ページクラスに2つのプロパティを用意します． 一つめは
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>id</code>
					属性と同じ名前で， 配列型のプロパティです． このプロパティは選択された項目の値を保持します．
				</p>
				<p>
					二つめは
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					の
					<code>id</code>
					属性の値に
					<code>Items</code>
					を加えた名前で， 型は次のいずれかです．
				</p>
				<ul>
					<li>
						配列または
						<code>java.util.List</code>
					</li>
					<li>
						<code>java.util.Map</code>
					</li>
				</ul>
				<p>
					配列または
					<code>List</code>
					型の場合は， その要素型はDtoまたは
					<code>java.util.Map</code>
					で，
					<code>label</code>
					および
					<code>value</code>
					というプロパティ (
					<code>Map</code>
					の場合はキー) でラジオボタンのラベルと値を保持します．
					<code>Map</code>
					の場合は，
					<var>label</var>
					=
					<var>value</var>
					というマッピングでラベルと値を保持します (順序を維持するには
					<code>java.util.LinkedHashMap</code>
					を使うことを推奨します)．
				</p>
				<p>
					レンダリング時，
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の内容は
					<code>Items</code>
					プロパティの要素の数分の
					<code>&lt;input&gt;</code>
					要素に置き換えられます．
				</p>
				<p>
					<a href="ext_concept_page.html#ポストバック">ポストバック</a>
					時，ブラウザで選択された項目の値が
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>id</code>
					属性と同じ名前のプロパティに設定されます． ただし， 「
					<a href="ext_rev_validation.html">バリデーション</a>
					」でエラーが発生した場合は設定されません．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<div id="select">
    <input type="radio" name="select" /> Item1
    <input type="radio" name="select" /> Item2
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String select;
public List<Map> selectItems;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>selectItems</code>
					が3つの要素を持つ場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<table id="select">
    <tr>
        <td>
            <label><input type="radio" name="form:select" value="A" />AAAA</label>
        </td>
        <td>
            <label><input type="radio" name="form:select" value="B" />BBBB</label>
        </td>
        <td>
            <label><input type="radio" name="form:select" value="C" />CCCC</label>
        </td>
    </tr>
</table>
]]></source>
				<p>
					最初のラジオボタンを選択してサブミットすると， ページクラスの
					<code>select</code>
					プロパティには，
					<code>"A"</code>
					が設定されます．
				</p>
			</subsection>

			<subsection name="動的なラジオボタンで1行に描画される数を指定するには">
				<div class="sidebar">
					<a href="">te名前空間</a>
					を使用するには
					<code>&lt;html&gt;</code>
					要素で名前空間宣言を指定する必要があります．
				</div>
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>te:col</code>
					属性に 1 行あたりのチェックボックスの数を指定します．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<div id="select" te:col="2">
    <input type="radio" name="select" />Item1
    <input type="radio" name="select" />Item2
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String select;
public List<Map> selectItems;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>selectItems</code>
					が3つの要素を持つ場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<table id="select">
    <tr>
        <td>
            <label><input type="radio" name="form:select" value="A" />AAAA</label>
        </td>
        <td>
            <label><input type="radio" name="form:select" value="B" />BBBB</label>
        </td>
    </tr>
    <tr>
        <td>
            <label><input type="radio" name="form:select" value="C" />CCCC</label>
        </td>
    </tr>
</table>
]]></source>
			</subsection>

			<subsection name="動的なラジオボタンを縦に並べるには">
				<div class="sidebar">
					<a href="">te名前空間</a>
					を使用するには
					<code>&lt;html&gt;</code>
					要素で名前空間宣言を指定する必要があります．
				</div>
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>te:layout</code>
					属性に
					<code>pageDirection</code>
					を指定します (デフォルトは
					<code>lineDirection</code>
					です)．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<div id="select" te:layout="pageDirection">
    <input type="radio" name="select" />Item1
    <input type="radio" name="select" />Item2
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String select;
public List<Map> selectItems;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>optionItems</code>
					が3つの要素を持つ場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<table id="select">
    <tr>
        <td>
            <label><input type="radio" name="form:select" value="A" />AAAA</label>
        </td>
    </tr>
    <tr>
        <td>
            <label><input type="radio" name="form:select" value="B" />BBBB</label>
        </td>
    </tr>
    <tr>
        <td>
            <label><input type="radio" name="form:select" value="C" />CCCC</label>
        </td>
    </tr>
</table>
]]></source>
			</subsection>

			<subsection name="動的なラジオボタンでテーブルを使わずに描画するには">
				<div class="sidebar">
					<a href="">te名前空間</a>
					を使用するには
					<code>&lt;html&gt;</code>
					要素で名前空間宣言を指定する必要があります．
				</div>
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>te:layout</code>
					属性に
					<code>none</code>
					を指定します．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<div id="select" te:layout="none">
    <input type="radio" name="select" />Option1
    <input type="radio" name="select" />Option2
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String select;
public List<Map> selectItems;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>selectItems</code>
					が3つの要素を持つ場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<label><input type="radio" name="form:select" value="A" />AAAA</label>
<label><input type="radio" name="form:select" value="B" />BBBB</label>
<label><input type="radio" name="form:select" value="C" />CCCC</label>
]]></source>
			</subsection>
		</section>

		<section name="チェックボックス (単一項目)">
			<div class="sidebar">
				ここで使われるコンポーネントは「selectBooleanCheckbox」と呼ばれます．
			</div>
			<p>単一項目のチェックボックスは，一つの選択肢で完結したチェックボックスです．</p>

			<subsection name="単一項目のチェックボックスを使うには">
				<div class="sidebar">
					<code>id</code>
					，
					<code>name</code>
					，
					<code>value</code>
					を除いた属性にはダイナミックプロパティを適用することができます． 詳細は「
					<a href="ext_rev_output.html#属性値を動的に出力するには">
						属性値を動的に出力するには
					</a>
					」を参照してください．
				</div>
				<p>
					<code>type</code>
					属性が
					<code>checkbox</code>
					の
					<code>&lt;input&gt;</code>
					要素を記述して
					<code>id</code>
					属性を付け， その値と同じ名前で型が
					<code>boolean</code>
					のプロパティをページクラスに用意します．
				</p>
				<p>
					レンダリング時，
					<code>&lt;input&gt;</code>
					要素の
					<code>value</code>
					属性にプロパティの値が設定されます．
				</p>
				<p>
					<a href="ext_concept_page.html#ポストバック">ポストバック</a>
					時，ブラウザで選択された状態がプロパティに設定されます． ただし， 「
					<a href="ext_rev_validation.html">バリデーション</a>
					」でエラーが発生した場合は設定されません．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<input type="checkbox" id="option" />
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public boolean option;
]]></source>
				<h5>例：レンダリング結果</h5>
				<source><![CDATA[
<input type="checkbox" id="option" name="form:option" value="true" />
]]></source>
				<p>
					チェックボックスを選択してサブミットすると， ページクラスの
					<code>option</code>
					プロパティには
					<code>true</code>
					が設定されます．
				</p>
			</subsection>

			<subsection name="単一項目のチェックボックスをチェックされた状態で表示するには">
				<p>
					<code>&lt;input&gt;</code>
					要素の
					<code>id</code>
					属性と同じ名前のプロパティを
					<code>true</code>
					に設定します．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<input type="checkbox" id="option" />
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public boolean option;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>option</code>
					プロパティの値が
					<code>true</code>
					の場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<input type="checkbox" id="option" name="form:option" value="true" checked="checked" />
]]></source>
				<p>
					チェックボックスの選択を解除してサブミットすると， ページクラスの
					<code>option</code>
					プロパティには
					<code>false</code>
					が設定されます．
				</p>
			</subsection>

			<subsection name="単一項目のチェックボックスを複数使うには">
				<p>
					<a href="ext_rev_foreach.html">forEach</a>
					と組み合わせます．
				</p>
				<div class="sidebar">
					サブミットされた値を受け取るには「
					<a href="">ItemsSave</a>
					」も必要です． 詳細は「」を参照してください．
				</div>
				<p>
					forEach にマッピングされる (
					<code>id</code>
					属性が
					<code>Items</code>
					で終わる) 要素を記述します． その
					<code>id</code>
					属性と同じ値を持つプロパティをページクラスに用意します． このプロパティの型は配列または
					<code>java.util.List</code>
					に，その要素の型はDtoまたは
					<code>java.util.Map</code>
					にします． Dtoのプロパティまたは
					<code>Map</code>
					のキーと同じ名前のプロパティをページクラスにも持たせます．
				</p>
				<p>
					<code>type</code>
					属性が
					<code>checkbox</code>
					の
					<code>&lt;input&gt;</code>
					要素に
					<code>id</code>
					属性を付け， Dtoのプロパティまたは
					<code>Map</code>
					のキーと同じ名前を付けます．
				</p>
				<p>
					レンダリング時，
					<code>input</code>
					要素の
					<code>value</code>
					属性の値は
					<code>id</code>
					属性の値と同じ名前のプロパティに置き換えられます．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<input type="hidden" id="optionItemsSave" />
<div id="optionItems">
    <label>
        <input type="checkbox" id="checked" value="dummy" />
        <span id="name" te:omittag="true">dummy</span>
    </label>
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public List<OptionDto> optionItems;
public boolean checked;
public String name;
]]></source>
				<h5>例：Dtoのプロパティ (OptionDto.java)</h5>
				<source><![CDATA[
public boolean checked;
public String name;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>optionItems</code>
					が2つの要素を持つ場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<input type="hidden" id="form:optionItemsSave" value="..." />
    
    <label>
        <input type="checkbox" id="checked" name="form:optionItems:0:checked" value="true" />
        Teeda
    </label>
    <label>
        <input type="checkbox" id="checked" name="form:optionItems:1:checked" value="true" />
        SAStruts
    </label>
    
]]></source>
				<p>
					1番目のチェックボックス(Teeda)を選択してサブミットすると， ページクラスの
					<code>optionItems</code>
					の最初の要素の
					<code>option</code>
					プロパティには
					<code>true</code>
					が，2番目の要素の
					<code>option</code>
					プロパティには
					<code>false</code>
					が設定されます．
				</p>
				<h4>関連項目</h4>
				<ul>
					<li>
						<a href="">forEach</a>
					</li>
					<li>
						<a href="">itemsSave</a>
					</li>
				</ul>
			</subsection>
		</section>

		<section name="チェックボックス (複数項目)">
			<div class="sidebar">
				ここで使われるコンポーネントは「selectManyCheckbox」と呼ばれます．
			</div>
			<p>複数項目のチェックボックスは， 複数の選択肢が一つのグループを構成するチェックボックスです．</p>

			<subsection name="複数項目のチェックボックスを使うには">
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素に
					<code>id</code>
					属性を付けます． 要素の内容には，
					<code>type</code>
					属性が
					<code>checkbox</code>
					で，
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>id</code>
					属性と同じ
					<code>name</code>
					属性を持つ
					<code>&lt;input&gt;</code>
					要素を記述します． この
					<code>&lt;input&gt;</code>
					要素は実行時には捨てられます (ブラウザで直接プレビューする際のモックとして活用してください)．
				</p>
				<p>
					ページクラスに2つのプロパティを用意します． 一つめは
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>id</code>
					属性と同じ名前で， 配列型のプロパティです． このプロパティは選択された項目の値を保持します．
				</p>
				<p>
					二つめは
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					の
					<code>id</code>
					属性の値に
					<code>Items</code>
					を加えた名前で， 型は次のいずれかです．
				</p>
				<ul>
					<li>
						配列または
						<code>java.util.List</code>
					</li>
					<li>
						<code>java.util.Map</code>
					</li>
				</ul>
				<p>
					配列または
					<code>List</code>
					型の場合は， その要素型はDtoまたは
					<code>java.util.Map</code>
					で，
					<code>label</code>
					および
					<code>value</code>
					というプロパティ (
					<code>Map</code>
					の場合はキー) でラジオボタンのラベルと値を保持します．
					<code>Map</code>
					の場合は，
					<var>label</var>
					=
					<var>value</var>
					というマッピングでラベルと値を保持します (順序を維持するには
					<code>java.util.LinkedHashMap</code>
					を使うことを推奨します)．
				</p>
				<p>
					レンダリング時，
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の内容は
					<code>Items</code>
					プロパティの要素の数分の
					<code>&lt;input&gt;</code>
					要素に置き換えられます．
				</p>
				<p>
					<a href="ext_concept_page.html#ポストバック">ポストバック</a>
					時，ブラウザで選択された項目の値が
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>id</code>
					属性と同じ名前のプロパティに設定されます． ただし， 「
					<a href="ext_rev_validation.html">バリデーション</a>
					」でエラーが発生した場合は設定されません．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<div id="option">
    <input type="checkbox" name="option" /> Option1
    <input type="checkbox" name="option" /> Option2
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String[] option;
public List<Map> optionItems;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>optionItems</code>
					が3つの要素を持つ場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<table id="option">
    <tr>
        <td>
            <label><input type="checkbox" name="form:option" value="A" />AAAA</label>
        </td>
        <td>
            <label><input type="checkbox" name="form:option" value="B" />BBBB</label>
        </td>
        <td>
            <label><input type="checkbox" name="form:option" value="C" />CCCC</label>
        </td>
    </tr>
</table>
]]></source>
				<p>
					全てのチェックボックスを選択してサブミットすると， ページクラスの
					<code>option</code>
					プロパティには，
					<code>"A"</code>
					，
					<code>"B"</code>
					，
					<code>"C"</code>
					を要素とする配列が設定されます．
				</p>
			</subsection>

			<subsection name="複数項目のチェックボックスで1行に描画される数を指定するには">
				<div class="sidebar">
					<a href="">te名前空間</a>
					を使用するには
					<code>&lt;html&gt;</code>
					要素で名前空間宣言を指定する必要があります．
				</div>
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>te:col</code>
					属性に 1 行あたりのチェックボックスの数を指定します．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<div id="option" te:col="2">
    <input type="checkbox" name="option" /> Option1
    <input type="checkbox" name="option" /> Option2
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String[] option;
public List<Map> optionItems;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>optionItems</code>
					が3つの要素を持つ場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<table id="option">
    <tr>
        <td>
            <label><input type="checkbox" name="form:option" value="A" />AAAA</label>
        </td>
        <td>
            <label><input type="checkbox" name="form:option" value="B" />BBBB</label>
        </td>
    </tr>
    <tr>
        <td>
            <label><input type="checkbox" name="form:option" value="C" />CCCC</label>
        </td>
    </tr>
</table>
]]></source>
			</subsection>

			<subsection name="複数項目のチェックボックスを縦に並べるには">
				<div class="sidebar">
					<a href="">te名前空間</a>
					を使用するには
					<code>&lt;html&gt;</code>
					要素で名前空間宣言を指定する必要があります．
				</div>
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>te:layout</code>
					属性に
					<code>pageDirection</code>
					を指定します (デフォルトは
					<code>lineDirection</code>
					です)．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<div id="option" te:layout="pageDirection">
    <input type="checkbox" name="option" /> Option1
    <input type="checkbox" name="option" /> Option2
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String[] option;
public List<Map> optionItems;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>optionItems</code>
					が3つの要素を持つ場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<table id="option">
    <tr>
        <td>
            <label><input type="checkbox" name="form:option" value="A" />AAAA</label>
        </td>
    </tr>
    <tr>
        <td>
            <label><input type="checkbox" name="form:option" value="B" />BBBB</label>
        </td>
    </tr>
    <tr>
        <td>
            <label><input type="checkbox" name="form:option" value="C" />CCCC</label>
        </td>
    </tr>
</table>
]]></source>
			</subsection>

			<subsection name="複数項目のチェックボックスでテーブルを使わずに描画するには">
				<div class="sidebar">
					<a href="">te名前空間</a>
					を使用するには
					<code>&lt;html&gt;</code>
					要素で名前空間宣言を指定する必要があります．
				</div>
				<p>
					<code>&lt;span&gt;</code>
					要素または
					<code>&lt;div&gt;</code>
					要素の
					<code>te:layout</code>
					属性に
					<code>none</code>
					を指定します．
				</p>
				<h5>例：テンプレートHTML (foo.html)</h5>
				<source><![CDATA[
<div id="option" te:layout="none">
    <input type="checkbox" name="option1" /> Option1
    <input type="checkbox" name="option2" /> Option2
</div>
]]></source>
				<h5>例：ページクラスのプロパティ (FooPage.java)</h5>
				<source><![CDATA[
public String[] option;
public List<Map> optionItems;
]]></source>
				<h5>例：レンダリング結果</h5>
				<p>
					<code>optionItems</code>
					が3つの要素を持つ場合， レンダリング結果は次のようになります．
				</p>
				<source><![CDATA[
<label><input type="checkbox" name="form:option" value="A" />AAAA</label>
<label><input type="checkbox" name="form:option" value="B" />BBBB</label>
<label><input type="checkbox" name="form:option" value="C" />CCCC</label>
]]></source>
			</subsection>
		</section>
	</body>
</document>
